{"version":3,"sources":["components/Button.module.css","components/Counter.module.css","components/Button.js","redux/reducer.js","components/Settings.js","components/Display.js","components/Counter.js","App.js","serviceWorker.js","redux/store.js","index.js","components/Display.module.css","components/Settings.module.css"],"names":["module","exports","button","disabled","counter","buttons","Button","render","react_default","a","createElement","onClick","_this","props","className","concat","styles","value","React","Component","initialState","currentValue","maxValue","startValue","error","message","Settings","state","newMax","newStart","updateMaxValue","newValue","newValueNumber","target","isMessage","setState","isError","updateStartValue","setNewSettingsClick","setNewSettings","localStorage","setItem","span","input","onChange","type","components_Button","localStorageMax","getItem","localStorageStart","this","connect","Display","s","display","Counter","incrementCurrentValue","resetCurrentValue","components_Display","App","components_Settings","components_Counter","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","action","Object","objectSpread2","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75953acc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__SIBWI\",\"disabled\":\"Button_disabled__21Ux-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2XvbZ\",\"buttons\":\"Counter_buttons__1D8nd\"};","import React from 'react';\r\nimport styles from './Button.module.css'\r\n\r\n\r\nclass Button extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <button onClick={this.props.onClick}\r\n                    className={this.props.disabled\r\n                        ? `${styles.button} ${styles.disabled}`\r\n                        : styles.button}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n\r\n","export const SET_NEW_SETTINGS = 'Counter/src/redux/SET-NEW-SETTINGS';\r\nexport const INC_CURRENT_VALUE = 'Counter/src/redux/INC-CURRENT-VALUE';\r\nexport const RESET_CURRENT_VALUE = 'Counter/src/redux/RESET-CURRENT-VALUE';\r\nexport const SET_ERROR = 'Counter/src/redux/SET-ERROR';\r\nexport const SET_MESSAGE = 'Counter/src/redux/SET-MESSAGE';\r\n\r\nconst initialState = {\r\n    currentValue: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    error: false,\r\n    message: true\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_NEW_SETTINGS:\r\n            return {\r\n                ...state,\r\n                currentValue: action.newStart,\r\n                maxValue: action.newMax,\r\n                startValue: action.newStart\r\n            };\r\n        case INC_CURRENT_VALUE:\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1\r\n            };\r\n        case RESET_CURRENT_VALUE:\r\n            return {...state, currentValue: state.startValue};\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.value\r\n            };\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ActionCreators\r\n\r\nexport const setNewSettingsAC = (newMax, newStart) => ({type: SET_NEW_SETTINGS, newMax, newStart});\r\n\r\nexport const incrementCurrentValueAC = () => ({type: INC_CURRENT_VALUE});\r\n\r\nexport const resetCurrentValueAC = () => ({type: RESET_CURRENT_VALUE});\r\n\r\nexport const setErrorAC = (value) => ({type: SET_ERROR, value});\r\n\r\nexport const setMessageAC = (value) => ({type: SET_MESSAGE, value});\r\n\r\n\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport {connect} from 'react-redux';\r\nimport {setNewSettingsAC, setErrorAC, setMessageAC} from '../redux/reducer';\r\nimport styles from './Settings.module.css';\r\n\r\nclass Settings extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let localStorageMax = +localStorage.getItem('maxValue');\r\n        let localStorageStart = +localStorage.getItem('startValue');\r\n        if (localStorageMax && localStorageStart) {\r\n            this.setState({\r\n                newMax: localStorageMax,\r\n                newStart: localStorageStart\r\n            });\r\n            this.props.setNewSettings(localStorageMax, localStorageStart);\r\n        }\r\n    }\r\n\r\n    state = {\r\n        newMax: this.props.maxValue,\r\n        newStart: this.props.startValue\r\n    };\r\n\r\n    updateMaxValue = (newValue) => {\r\n        const newValueNumber = +newValue.target.value;\r\n        this.props.isMessage(true);\r\n        this.setState({newMax: newValueNumber});\r\n\r\n        newValueNumber <= this.state.newStart\r\n            ? this.props.isError(true)\r\n            : this.props.isError(false);\r\n    };\r\n\r\n    updateStartValue = (newValue) => {\r\n        const newValueNumber = +newValue.target.value;\r\n        this.props.isMessage(true);\r\n        this.setState({newStart: newValueNumber});\r\n\r\n        newValueNumber < 0\r\n            ? this.props.isError(true)\r\n            : newValueNumber >= this.state.newMax\r\n            ? this.props.isError(true)\r\n            : this.props.isError(false);\r\n    };\r\n\r\n    setNewSettingsClick = () => {\r\n        this.props.isMessage(false);\r\n        this.props.setNewSettings(this.state.newMax, this.state.newStart);\r\n\r\n        localStorage.setItem('maxValue', this.state.newMax);\r\n        localStorage.setItem('startValue', this.state.newStart);\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className='border'>\r\n                <div className='smallBorder'>\r\n                    <span className={styles.span}>max value:\r\n                        <input className={styles.input}\r\n                               onChange={this.updateMaxValue}\r\n                               value={this.state.newMax}\r\n                               type={'number'}/>\r\n                    </span>\r\n                    <span className={styles.span}>start value:\r\n                        <input className={styles.input}\r\n                               type={'number'}\r\n                               onChange={this.updateStartValue}\r\n                               value={this.state.newStart}/>\r\n                    </span>\r\n                </div>\r\n                <div className='smallBorder'>\r\n                    <Button onClick={this.setNewSettingsClick}\r\n                            value={'set'}\r\n                            disabled={this.props.error}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        maxValue: state.maxValue,\r\n        startValue: state.startValue,\r\n        error: state.error\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    setNewSettings: setNewSettingsAC,\r\n    isError: setErrorAC,\r\n    isMessage: setMessageAC\r\n})(Settings);\r\n\r\n","import React from 'react';\r\nimport styles from './Display.module.css';\r\n\r\nclass Display extends React.Component {\r\n    render = () => {\r\n        let s = this.props.currentValue === this.props.maxValue\r\n            ? `${styles.display} ${styles.maxValue}`\r\n            : styles.display;\r\n\r\n        return (\r\n            <div className={`${s} smallBorder`}>\r\n                {this.props.error\r\n                    ? <span className={styles.error}>Incorrect value!</span>\r\n                    : this.props.message\r\n                        ? <span className={styles.message}>enter values and press 'set'</span>\r\n                        : <p>{this.props.currentValue}</p>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Display;\r\n\r\n","import React from 'react';\r\nimport Display from './Display';\r\nimport Button from './Button';\r\nimport {incrementCurrentValueAC, resetCurrentValueAC} from '../redux/reducer';\r\nimport {connect} from 'react-redux';\r\nimport styles from './Counter.module.css';\r\n\r\nclass Counter extends React.Component {\r\n\r\n    incrementCurrentValue = () => {\r\n        this.props.incrementCurrentValue();\r\n    };\r\n\r\n    resetCurrentValue = () => {\r\n        this.props.resetCurrentValue();\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className={`border ${styles.counter}`}>\r\n                <Display currentValue={this.props.currentValue}\r\n                         maxValue={this.props.maxValue}\r\n                         error={this.props.error}\r\n                         message={this.props.message}\r\n                />\r\n                <div className={`smallBorder ${styles.buttons}`}>\r\n                    <Button disabled={\r\n                        this.props.currentValue === this.props.maxValue\r\n                        || this.props.error\r\n                        || this.props.message\r\n                    }\r\n                            onClick={this.incrementCurrentValue}\r\n                            value={'inc'}/>\r\n                    <Button disabled={this.props.currentValue === this.props.startValue || this.props.error}\r\n                            onClick={this.resetCurrentValue}\r\n                            value={'reset'}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentValue: state.currentValue,\r\n        maxValue: state.maxValue,\r\n        startValue: state.startValue,\r\n        error: state.error,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    incrementCurrentValue: incrementCurrentValueAC,\r\n    resetCurrentValue: resetCurrentValueAC\r\n})(Counter);\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Settings from './components/Settings';\r\nimport Counter from './components/Counter';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className='App'>\r\n                <Settings/>\r\n                <Counter/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {createStore} from 'redux';\r\nimport {reducer} from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Display_error__369vF\",\"message\":\"Display_message__2p7NY\",\"display\":\"Display_display__1oycJ\",\"maxValue\":\"Display_maxValue__3rHwt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Settings_span__1FwTc\",\"input\":\"Settings_input__2-rI4\"};"],"sourceRoot":""}